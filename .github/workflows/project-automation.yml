name: "Project Automation"
on:
  issues:
    types: [opened, closed, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, ready_for_review]
  create:
  push:
    branches-ignore:
      - main

jobs:
  project_automation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate App Token
        id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.PROJECT_APP_ID }}
          private-key: ${{ secrets.PROJECT_APP_KEY }}
          owner: ninja-concepts

      - name: Resolve Project Node ID
        id: resolve_project
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          # If PROJECT_OWNER and PROJECT_NUMBER are provided, resolve node id; else use PROJECT_ID
          if [ -n "${{ vars.PROJECT_OWNER }}" ] && [ -n "${{ vars.PROJECT_NUMBER }}" ]; then
            echo "Resolving project node id from owner/number: ${{ vars.PROJECT_OWNER }}#${{ vars.PROJECT_NUMBER }}"
            NODE_ID=$(gh api graphql -f query='
              query($owner: String!, $number: Int!) {
                organization(login: $owner) { projectV2(number: $number) { id }
              }
            }' -f owner='${{ vars.PROJECT_OWNER }}' -F number='${{ vars.PROJECT_NUMBER }}' --jq '.data.organization.projectV2.id' 2>/dev/null)
            if [ -z "$NODE_ID" ]; then
              NODE_ID=$(gh api graphql -f query='
                query($owner: String!, $number: Int!) {
                  user(login: $owner) { projectV2(number: $number) { id } }
                }' -f owner='${{ vars.PROJECT_OWNER }}' -F number='${{ vars.PROJECT_NUMBER }}' --jq '.data.user.projectV2.id' 2>/dev/null)
            fi
            if [ -z "$NODE_ID" ]; then
              echo "Failed to resolve project node id from owner/number" >&2
              exit 1
            fi
            echo "PROJECT_NODE_ID=$NODE_ID" >> $GITHUB_OUTPUT
          else
            echo "Using PROJECT_ID variable as node id"
            echo "PROJECT_NODE_ID=${{ vars.PROJECT_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Auto-assign new issues to project
        if: github.event_name == 'issues' && github.event.action == 'opened'
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          echo "Adding issue #${{ github.event.issue.number }} to project"
          
          # Add to project board using GraphQL API
          gh api graphql -f query='
            mutation($project: ID!, $issue: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item { 
                  id 
                  fieldValues(first: 20) {
                    nodes {
                      ... on ProjectV2ItemFieldSingleSelectValue {
                        name
                        field {
                          ... on ProjectV2SingleSelectField {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" -f issue="${{ github.event.issue.node_id }}"

      - name: Set initial status for new issues
        if: github.event_name == 'issues' && github.event.action == 'opened'
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          echo "Setting initial status to Backlog"
          
          # Get the project item ID first
          ITEM_ID=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                        }
                      }
                    }
                  }
                }
              }
            }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
            --jq ".data.node.items.nodes[] | select(.content.number == ${{ github.event.issue.number }}) | .id")
          
          # Set status to "Backlog"
          if [ ! -z "$ITEM_ID" ]; then
            gh api graphql -f query='
              mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project, 
                  itemId: $item, 
                  fieldId: $field, 
                  value: {singleSelectOptionId: $value}
                }) { 
                  projectV2Item { id } 
                }
              }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
                 -f item="$ITEM_ID" \
                 -f field="${{ vars.STATUS_FIELD_ID }}" \
                 -f value="${{ vars.BACKLOG_OPTION_ID }}"
          fi

      - name: Move to Dev Complete on PR merge
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          echo "PR #${{ github.event.pull_request.number }} merged, updating related issues"
          
          # Extract issue number from PR body or title
          ISSUE_NUMBER=""
          
          # Check PR body for "Closes #123" patterns
          if [[ "${{ github.event.pull_request.body }}" =~ [Cc]loses[[:space:]]+#([0-9]+) ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event.pull_request.body }}" =~ [Ff]ixes[[:space:]]+#([0-9]+) ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event.pull_request.body }}" =~ [Rr]esolves[[:space:]]+#([0-9]+) ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
          fi
          
          if [ ! -z "$ISSUE_NUMBER" ]; then
            echo "Found linked issue #$ISSUE_NUMBER"
            
            # Get the project item ID for the issue
            ITEM_ID=$(gh api graphql -f query='
              query($project: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
              --jq ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
            
            if [ ! -z "$ITEM_ID" ]; then
              # Update issue status to "Dev Complete"
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project, 
                    itemId: $item, 
                    fieldId: $field, 
                    value: {singleSelectOptionId: $value}
                  }) { 
                    projectV2Item { id } 
                  }
                }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
                   -f item="$ITEM_ID" \
                   -f field="${{ vars.STATUS_FIELD_ID }}" \
                   -f value="${{ vars.DEV_COMPLETE_OPTION_ID }}"
              
              # Assign to QA if QA_ASSIGNEE is set
              if [ ! -z "${{ vars.QA_ASSIGNEE }}" ]; then
                gh issue edit $ISSUE_NUMBER --add-assignee "${{ vars.QA_ASSIGNEE }}"
                echo "Assigned issue #$ISSUE_NUMBER to QA: ${{ vars.QA_ASSIGNEE }}"
              fi
              
              # Send QA notification email
              if [ ! -z "${{ vars.QA_EMAIL }}" ] && [ ! -z "${{ secrets.SENDGRID_API_KEY }}" ]; then
                echo "Sending QA notification email for issue #$ISSUE_NUMBER"
                
                # Get issue details for email
                ISSUE_DETAILS=$(gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER --jq '{
                  number: .number,
                  title: .title,
                  body: .body,
                  assignees: [.assignees[].login],
                  labels: [.labels[].name],
                  html_url: .html_url
                }')
                
                # Get PR details
                PR_DETAILS=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} --jq '{
                  number: .number,
                  title: .title,
                  html_url: .html_url,
                  user: .user.login,
                  merged_at: .merged_at
                }')
                
                # Generate email content using repository script
                ISSUE_DETAILS="$ISSUE_DETAILS" PR_DETAILS="$PR_DETAILS" OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" node scripts/generate-qa-email.js
                
                # Send email via SendGrid
                QA_SUBJECT=$(cat /tmp/qa_email_subject.txt)
                QA_BODY=$(cat /tmp/qa_email_body.html)
                
                jq -n \
                  --arg to "${{ vars.QA_EMAIL }}" \
                  --arg fromEmail "${{ vars.FROM_EMAIL || 'noreply@github.com' }}" \
                  --arg fromName "${{ vars.FROM_NAME || 'Development Team' }}" \
                  --arg subject "$QA_SUBJECT" \
                  --arg body "$QA_BODY" \
                  '{
                    personalizations: [{to: [{email: $to}]}],
                    from: {email: $fromEmail, name: $fromName},
                    subject: $subject,
                    content: [{type: "text/html", value: $body}]
                  }' > /tmp/qa_sendgrid_payload.json

                curl -X "POST" \
                  "https://api.sendgrid.com/v3/mail/send" \
                  -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
                  -H "Content-Type: application/json" \
                  -d @/tmp/qa_sendgrid_payload.json
                
                if [ $? -eq 0 ]; then
                  echo "✅ QA notification email sent successfully!"
                else
                  echo "❌ Failed to send QA notification email"
                fi
              fi
            fi
          else
            echo "No linked issue found in PR body"
          fi

      - name: Update priority based on labels
        if: github.event_name == 'issues' && (github.event.action == 'labeled' || github.event.action == 'unlabeled')
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          echo "Checking for priority label changes"
          
          # Get current labels
          LABELS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }} --jq '.labels[].name')
          
          PRIORITY=""
          if echo "$LABELS" | grep -q "priority:critical"; then
            PRIORITY="${{ vars.CRITICAL_PRIORITY_ID }}"
          elif echo "$LABELS" | grep -q "priority:high"; then
            PRIORITY="${{ vars.HIGH_PRIORITY_ID }}"
          elif echo "$LABELS" | grep -q "priority:medium"; then
            PRIORITY="${{ vars.MEDIUM_PRIORITY_ID }}"
          elif echo "$LABELS" | grep -q "priority:low"; then
            PRIORITY="${{ vars.LOW_PRIORITY_ID }}"
          fi
          
          if [ ! -z "$PRIORITY" ]; then
            # Get the project item ID
            ITEM_ID=$(gh api graphql -f query='
              query($project: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
              --jq ".data.node.items.nodes[] | select(.content.number == ${{ github.event.issue.number }}) | .id")
            
            if [ ! -z "$ITEM_ID" ]; then
              # Update priority field
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project, 
                    itemId: $item, 
                    fieldId: $field, 
                    value: {singleSelectOptionId: $value}
                  }) { 
                    projectV2Item { id } 
                  }
                }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
                   -f item="$ITEM_ID" \
                   -f field="${{ vars.PRIORITY_FIELD_ID }}" \
                   -f value="$PRIORITY"
            fi
          fi

      - name: Move to In Progress on branch creation
        if: (github.event_name == 'create' && github.event.ref_type == 'branch') || (github.event_name == 'push' && github.ref != 'refs/heads/main')
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          if [ "${{ github.event_name }}" = "create" ]; then
            BRANCH_NAME="${{ github.event.ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "Branch '$BRANCH_NAME' was created/pushed"
          
          # Extract issue number from branch name following Git Flow convention
          ISSUE_NUMBER=""
          if [[ "$BRANCH_NAME" == feature/issue-* ]] || [[ "$BRANCH_NAME" == bugfix/issue-* ]] || [[ "$BRANCH_NAME" == hotfix/issue-* ]]; then
            ISSUE_NUMBER=$(echo "$BRANCH_NAME" | sed -n 's/.*issue-\([0-9]\+\).*/\1/p')
            echo "Detected issue number: #$ISSUE_NUMBER from branch naming pattern"
          elif [[ "$BRANCH_NAME" =~ issue-[0-9]+ ]]; then
            ISSUE_NUMBER=$(echo "$BRANCH_NAME" | sed -n 's/.*issue-\([0-9]\+\).*/\1/p')
            echo "Detected issue number: #$ISSUE_NUMBER from branch name"
          fi
          
          if [ ! -z "$ISSUE_NUMBER" ]; then
            echo "Moving issue #$ISSUE_NUMBER to 'In Progress' status"
            
            # Check if issue exists
            if ! gh issue view $ISSUE_NUMBER >/dev/null 2>&1; then
              echo "Issue #$ISSUE_NUMBER not found, skipping"
              exit 0
            fi

            # Get issue node id (needed to add to project if missing)
            ISSUE_NODE_ID=$(gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER --jq '.node_id')
            
            # Get the project item ID for the issue
            ITEM_ID=$(gh api graphql -f query='
              query($project: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
              --jq ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")
            
            # If not found in the first page of items, try adding the issue to the project
            if [ -z "$ITEM_ID" ]; then
              echo "Project item for issue #$ISSUE_NUMBER not found in project; adding it now"
              ITEM_ID=$(gh api graphql -f query='
                mutation($project: ID!, $issue: ID!) {
                  addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                    item { id }
                  }
                }
              ' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" -f issue="$ISSUE_NODE_ID" --jq ".data.addProjectV2ItemById.item.id")
            fi

            if [ ! -z "$ITEM_ID" ]; then
              # Update issue status to "In Progress"
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project, 
                    itemId: $item, 
                    fieldId: $field, 
                    value: {singleSelectOptionId: $value}
                  }) { 
                    projectV2Item { id } 
                  }
                }' -f project="${{ steps.resolve_project.outputs.PROJECT_NODE_ID }}" \
                   -f item="$ITEM_ID" \
                   -f field="${{ vars.STATUS_FIELD_ID }}" \
                   -f value="${{ vars.IN_PROGRESS_OPTION_ID }}"
              
              echo "✅ Successfully moved issue #$ISSUE_NUMBER to 'In Progress' status"
            else
              echo "Could not find project item for issue #$ISSUE_NUMBER"
            fi
          else
            echo "No issue number detected in branch name '$BRANCH_NAME'"
            echo "Expected format: feature/issue-123-description or bugfix/issue-123-description"
          fi